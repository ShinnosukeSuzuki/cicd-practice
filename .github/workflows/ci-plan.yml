name: Terraform Plan
on:
  pull_request:
    branches: [main]
defaults:
  run:
    shell: bash # Use bash shell for all run steps
env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: "1.11.3"
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read # To checkout
    steps:
      - uses: actions/checkout@v4
      - id: changed-files
        uses: tj-actions/changed-files@v44
        with:
            files: terraform/**/*.{hcl,tf,yaml}
            matrix: true
      - name: Extract Unique Directories
        id: extract-dirs
        run: |
          if [ "$(echo "$all_changed_and_modified_files" | jq 'length')" -eq 0 ]; then
            unique_dirs='[]'
          else
            unique_dirs=$(echo "$all_changed_and_modified_files" | jq -r '.[]' | xargs -n1 dirname | sort -u | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "unique_dirs=${unique_dirs}" >> "$GITHUB_OUTPUT"
        env:
            all_changed_and_modified_files: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
    outputs:
        terraform-modified-dirs: ${{ steps.extract-dirs.outputs.unique_dirs }}
  plan:
    if: ${{ needs.changes.outputs.terraform-modified-dirs != '[]' && needs.changes.outputs.terraform-modified-dirs != '' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30 # mins. Default is 360 mins.
    needs: [changes]
    permissions:
      contents: read # To checkout
      id-token: write # To assume role
      pull-requests: write # To comment on PRs
    strategy:
      fail-fast: false
      matrix:
        working-directory: ${{ fromJson(needs.changes.outputs.terraform-modified-dirs) }}
    steps:
      - uses: actions/checkout@v4
      - name: Load Configuration
        id: load_config
        run: |
            # JSON„Éï„Ç°„Ç§„É´„ÅÆ„ÉÜ„É≥„Éó„É¨„Éº„Éà„Çí‰ΩúÊàê
            echo '{
            "terraform/platform/service-1/development": {
                "name": "service-1",
                "type": "terraform",
                "path": "terraform/platform/service-1/development",
                "description": "Terraform configuration for service 1 in development environment",
                "variables": {
                "baket_name": "${{ secrets.DEV_BUCKET_NAME }}",
                "assume_role": "${{ secrets.DEV_ASSUME_ROLE }}"
                }
            },
            "terraform/platform/service-1/production": {
                "name": "service-1",
                "type": "terraform",
                "path": "terraform/platform/service-1/production",
                "description": "Terraform configuration for service 1 in production environment",
                "variables": {
                "baket_name": "${{ secrets.PROD_BUCKET_NAME }}",
                "assume_role": "${{ secrets.PROD_ASSUME_ROLE }}"
                }
            }
            }' > terraform-config.json
            echo "config_file=terraform-config.json" >> $GITHUB_OUTPUT
      - name: Process Configuration
        id: process_config
        run: |
            # ÁîüÊàê„Åï„Çå„ÅüJSON„Éï„Ç°„Ç§„É´„Çí‰ΩøÁî®
            CONFIG_FILE="${{ steps.load_config.outputs.config_file }}"
            
            # ÁèæÂú®„ÅÆ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆË®≠ÂÆö„ÇíÂèñÂæó
            DIR_CONFIG=$(cat $CONFIG_FILE | jq -r --arg dir "${{ matrix.working-directory }}" '.[$dir]')
            
            # Ë®≠ÂÆö„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
            if [ "$DIR_CONFIG" == "null" ]; then
            echo "No configuration found for directory: ${{ matrix.working-directory }}"
            exit 1
            fi
            
            # ÂøÖË¶Å„Å™Â§âÊï∞„ÇíÂá∫Âäõ
            BUCKET_NAME=$(echo $DIR_CONFIG | jq -r '.variables.baket_name')
            ASSUME_ROLE=$(echo $DIR_CONFIG | jq -r '.variables.assume_role')
            
            echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
            echo "assume_role=$ASSUME_ROLE" >> $GITHUB_OUTPUT
            echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ steps.process_config.outputs.assume_role }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ steps.process_config.outputs.bucket_name }}"
        working-directory: ${{ matrix.working-directory }}
      - name: Terraform Plan
        id: plan
        run: terraform plan -out .planfile
        working-directory: ${{ matrix.working-directory }}
      - name: Comment PR
        uses: borchero/terraform-plan-comment@v2
        with:
          header: "üìù Terraform Plan - ${{ matrix.working-directory }}"
          token: ${{ github.token }}
          planfile: .planfile
          working-directory: ${{ matrix.working-directory }}
  finish:
    if: ${{ always() && needs.changes.outputs.terraform-modified-dirs != '[]' && needs.changes.outputs.terraform-modified-dirs != '' }}
    runs-on: ubuntu-latest
    needs: [changes,plan]
    steps:
      - name: Check plan job status
        if: ${{ needs.plan.result != 'success' }}
        run: |
          echo "Terraform plan job did not succeed"
          exit 1
      - name: Finish
        run: echo "Finished"
